from tkinter import*
from tkinter import ttk
import pymysql
from tkinter import messagebox
class student:
    def __init__(self,root):
        self.root=root
        self.root.title('Student Management System')
        self.root.geometry('1300x700')
        self.root.configure(bg='#ecf0f1')

        title=Label(self.root,text='Student Management System',bd=10,relief=GROOVE,font=('times new roman',30,'bold'),bg='#2c3e50',fg='white')
        title.pack(side=TOP,fill=X)

        self.Roll_no_var=StringVar()
        self.name_var=StringVar()
        self.email_var=StringVar()
        self.gender_var=StringVar()
        self.contact_var=StringVar()
        self.dob_var=StringVar()
        
        self.search_by=StringVar()
        self.search_txt=StringVar()
        


        Manage_frame=Frame(self.root,bd=4,relief=RIDGE,bg='#2c3e50')
        Manage_frame.place(x=30,y=80,width=410,height=550)

        m_title=Label(Manage_frame,text='Manage Students',bg='#2c3e50',fg='white',font=('times new roman',30,'bold'))
        m_title.grid(row=0,columnspan=2,pady=10)
        
        lbl_roll=Label(Manage_frame,text='Roll No:',bg='#2c3e50',fg='white',font=('times new roman',20,'bold'))
        lbl_roll.grid(row=1,column=0,pady=5,padx=10,sticky='w')

        txt_roll=Entry(Manage_frame,textvariable=self.Roll_no_var,font=('times new roman',15,'bold'),bd=2,relief=GROOVE)
        txt_roll.grid(row=1,column=1,pady=5,padx=10,sticky='w')
        
        lbl_name=Label(Manage_frame,text='Name',bg='#2c3e50',fg='white',font=('times new roman',20,'bold'))
        lbl_name.grid(row=2,column=0,pady=5,padx=10,sticky='w')

        txt_name=Entry(Manage_frame,textvariable=self.name_var,font=('times new roman',15,'bold'),bd=2,relief=GROOVE)
        txt_name.grid(row=2,column=1,pady=5,padx=10,sticky='w')

        lbl_email=Label(Manage_frame,text='Email',bg='#2c3e50',fg='white',font=('times new roman',20,'bold'))
        lbl_email.grid(row=3,column=0,pady=5,padx=10,sticky='w')
 
        txt_email=Entry(Manage_frame,textvariable=self.email_var,font=('times new roman',15,'bold'),bd=2,relief=GROOVE)
        txt_email.grid(row=3 ,column=1,pady=5,padx=10,sticky='w')

        lbl_Gender=Label(Manage_frame,text='Gender',bg='#2c3e50',fg='white',font=('times new roman',20,'bold'),state='normal')
        lbl_Gender.grid(row=4,column=0,pady=5,padx=10,sticky='w')

        combo_Gender=ttk.Combobox(Manage_frame,textvariable=self.gender_var,font=('times new roman',20),width=13)
        combo_Gender['values']=('male','female','other')
        combo_Gender.grid(row=4,column=1,padx=5,pady=9)

        lbl_contact=Label(Manage_frame,text='Contact',bg='#2c3e50',fg='white',font=('times new roman',20,'bold'))
        lbl_contact.grid(row=5,column=0,pady=5,padx=10,sticky='w')

        txt_contact=Entry(Manage_frame,textvariabl=self.contact_var,font=('times new roman',15,'bold'),bd=2,relief=GROOVE)
        txt_contact.grid(row=5 ,column=1,pady=5,padx=10,sticky='w')

        lbl_dob=Label(Manage_frame,text='Dob',bg='#2c3e50',fg='white',font=('times new roman',20,'bold'))
        lbl_dob.grid(row=6,column=0,pady=5,padx=10,sticky='w')
   
        txt_dob=Entry(Manage_frame,textvariabl=self.dob_var,font=('times new roman',15,'bold'),bd=2,relief=GROOVE)
        txt_dob.grid(row=6 ,column=1,pady=5,padx=10,sticky='w')
  
        lbl_address=Label(Manage_frame,text='Address',bg='#2c3e50',fg='white',font=('times new roman',20,'bold'))
        lbl_address.grid(row=7,column=0,pady=5,padx=10,sticky='w')

        self.txt_address=Text(Manage_frame,width=34,height=4,font=('times new roman', 10), bd=2, relief=GROOVE)
        self.txt_address.grid(row=7,column=1,pady=5,padx=10,sticky='w')
        
        btn_frame=Frame(Manage_frame,bd=3,relief=RIDGE,bg='#2c3e50')
        btn_frame.place(x=1 ,y=450,width=430)

        Addbtn=Button(btn_frame,text='Add',width=10,command=self.add_students)
        Addbtn.grid(row=0, column=0, padx=5, pady=5)
        updatebtn=Button(btn_frame,text='Update',width=10,command=self.update_data)
        updatebtn.grid(row=0, column=1, padx=5, pady=5)
        deletebtn=Button(btn_frame,text='Delete',width=10,command=self.delete_data)
        deletebtn.grid(row=0, column=2, padx=5, pady=5)
        clearbtn=Button(btn_frame,text='Clear',width=10,command= self.clear)
        clearbtn.grid(row=0, column=3, padx=5, pady=5)


        
        Detail_frame=Frame(self.root,bd=4,relief=RIDGE,bg='#2c3e50')
        Detail_frame.place(x=460,y=80,width=800,height=550)

        lbl_search=Label(Detail_frame,text='Search By',bg='#2c3e50',fg='white',font=('times new roman',12,'bold'))
        lbl_search.place(x=5,y=5)

       
        combo_Search=ttk.Combobox(Detail_frame,textvariable=self.search_by,width=15,font=('times new roman',12,'bold'))
        combo_Search['values']=('ROLL_no','NAME','CONTACT')
        combo_Search.place(x=120,y=5)

        txt_Search=Entry(Detail_frame,textvariable=self.search_txt,width=25,font=('times new roman',10,'bold'),bd=2,relief=GROOVE)
        txt_Search.place(x=280,y=5)

        searchbtn=Button(Detail_frame,text='Search',width=10,command=self.search_data)
        searchbtn.place(x=500,y=5)
        showallbtn=Button(Detail_frame,text='Show All',width=10,command=self.fetch_data)
        showallbtn.place(x=600,y=5) 

        table_frame=Frame(Detail_frame,bd=4,relief=RIDGE,bg='#ffffff')
        table_frame.place( x=5, y=40,width=790,height=505)

        scroll_x=Scrollbar(table_frame,orient=HORIZONTAL)
        scroll_y=Scrollbar(table_frame,orient=VERTICAL)
        self.student_table=ttk.Treeview(table_frame,columns=('roll','name','email','gender','contact','dob','address'),xscrollcommand=scroll_x.set,yscrollcommand=scroll_y.set)
        scroll_x.pack(side=BOTTOM,fill=X)
        scroll_y.pack(side=RIGHT,fill=Y)
        scroll_x.config(command=self.student_table.xview)
        scroll_y.config(command=self.student_table.yview)
        self.student_table.heading('roll',text='Roll No')
        self.student_table.heading('name',text='Name')
        self.student_table.heading('email',text='Email')
        self.student_table.heading('gender',text='Gender')
        self.student_table.heading('contact',text='Contact')
        self.student_table.heading('dob',text='DOB')
        self.student_table.heading('address',text='Address')
        self.student_table['show']='headings'
        self.student_table.column('roll',width=70)
        self.student_table.column('name',width=100)
        self.student_table.column('email',width=120)
        self.student_table.column('gender',width=80)
        self.student_table.column('contact',width=100)
        self.student_table.column('dob',width=80)
        self.student_table.column('address',width=150)
        self.student_table.pack(fill=BOTH,expand=1)
        self.student_table.bind('<ButtonRelease-1>',self.get_cursor)
        self.fetch_data() 


    def add_students(self):
        if self.Roll_no_var.get()=='' or self.name_var.get()=='':
            messagebox.showerror('ERROR','All fields are required!!')
        else:
            con=pymysql.connect(host='localhost',user='root',password='root',database='student') 
            cur=con.cursor()
            cur.execute('insert into student1 values(%s,%s,%s,%s,%s,%s,%s)',(self.Roll_no_var.get(),
                                                                       self.name_var.get(),
                                                                       self.email_var.get(),
                                                                       self.gender_var.get(),
                                                                       self.contact_var.get(),
                                                                       self.dob_var.get(),
                                                                       self.txt_address.get('1.0',END)
                                                                       ))
        con.commit()
        self.fetch_data()
        self.clear()
        con.close()
        messagebox.showinfo('Success','Record has been insertedl')

    def fetch_data(self):
        con=pymysql.connect(host='localhost',user='root',password='root',database='student') 
        cur=con.cursor()
        cur.execute('select * from student1')
        rows=cur.fetchall()
        if len(rows)!=0:
            self.student_table.delete(*self.student_table.get_children())
            for row in rows:
                self.student_table.insert('',END,values=row)
            con.commit()
        con.close()
    def clear(self):
        self.Roll_no_var.set('')
        self.name_var.set('')
        self.email_var.set('')
        self.gender_var.set('')
        self.contact_var.set('')
        self.dob_var.set('')
        self.txt_address.delete('1.0',END)

    def get_cursor(self,ev):
        cursor_row=self.student_table.focus()
        content=self.student_table.item(cursor_row)
        row=content['values']
        self.Roll_no_var.set(row[0])
        self.name_var.set(row[1])
        self.email_var.set(row[2])
        self.gender_var.set(row[3])
        self.contact_var.set(row[4])
        self.dob_var.set(row[5])
        self.txt_address.delete('1.0',END)
        self.txt_address.insert(END,row[6])
        
    def update_data(self):
         con=pymysql.connect(host='localhost',user='root',password='root',database='student') 
         cur=con.cursor()
         cur.execute('update student1  set name=%s,email=%s,gender=%s,contact=%s,dob=%s,address=%s where roll_no=%s',(
                                                                       self.name_var.get(),
                                                                       self.email_var.get(),
                                                                       self.gender_var.get(),
                                                                       self.contact_var.get(),
                                                                       self.dob_var.get(),
                                                                       self.txt_address.get('1.0',END),
                                                                       self.Roll_no_var.get(),
                                                                        ))
         
        
         con.commit()
         self.fetch_data()
         self.clear()
         con.close()  

    def delete_data(self):
        con=pymysql.connect(host='localhost',user='root',password='root',database='student') 
        cur=con.cursor()
        cur.execute('delete from student1 where roll_no=%s',self.Roll_no_var.get())
        con.commit()
        con.close()
        self.fetch_data()
        self.clear()

    def search_data(self):
        con=pymysql.connect(host='localhost',user='root',password='root',database='student') 
        cur=con.cursor()

        cur.execute('select * from  student1 where'+str(self.search_by.get()), ('%' + self.search_txt.get() + '%',))
        rows=cur.fetchall()
        if len(rows)!=0:
            self.student_table.delete(*self.student_table.get_children())
            for row in rows:
                self.student_table.insert('',END,values=row)
            con.commit()
        con.close()
    


        

root=Tk()
ob=student(root)
root.mainloop()